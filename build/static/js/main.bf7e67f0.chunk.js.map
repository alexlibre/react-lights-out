{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","_super","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","console","log","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","flipCell","every","cell","setState","_this2","tblBoard","_loop","src_Cell_0","key","flipCellsAround","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf7e67f0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Cell.css';\n\nclass Cell extends Component {\n    constructor(props) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick(evt) {\n        this.props.flipCellsAroundMe();\n    }\n\n    render() {\n        let classes = 'Cell' + (this.props.isLit ? ' Cell-lit' : '');\n        \n        return (\n            <td className={classes} onClick={this.handleClick} />\n        );\n    }\n}\n\nexport default Cell;","import React, { Component } from 'react';\nimport Cell from './Cell';\nimport './Board.css';\n\nclass Board extends Component {\n    static defaultProps = {\n        nrows: 10,\n        ncols: 10,\n        chanceLightStartsOn: 0.5\n    }\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasWon: false,\n            board: this.createBoard()\n        }\n    }\n\n    createBoard() {\n        let board = [];\n        for(let y = 0; y < this.props.nrows; y++) {\n            let row = [];\n            for(let x = 0; x < this.props.ncols; x++) {\n                row.push(Math.random() < this.props.chanceLightStartsOn)\n            }\n            board.push(row);\n        }\n        return board;\n    }\n\n    flipCellsAround(coord) {\n        console.log(coord);\n        \n        let { ncols, nrows } = this.props;\n        let board = this.state.board;\n        let [y, x] = coord.split('-').map(Number);\n\n        function flipCell(y, x) {\n            if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n                board[y][x] = !board[y][x];\n            }\n        }\n\n        flipCell(y, x);\n        flipCell(y - 1, x);\n        flipCell(y + 1, x);\n        flipCell(y, x - 1);\n        flipCell(y, x + 1);\n\n        let hasWon = board.every(row => row.every(cell => !cell));\n\n        this.setState({ board, hasWon });\n    }\n\n    render() {\n        if (this.state.hasWon) {\n            return (\n                <h1 className=\"Board-title has-won\">\n                    <span className=\"neon-orange\">You_</span><span className=\"neon-blue\">won</span>\n                </h1>\n            );\n        }\n        let tblBoard = [];\n        for(let y = 0; y < this.props.nrows; y++) {\n            let row = [];\n            for(let x = 0; x < this.props.ncols; x++) {\n                const coord = y + '-' + x;\n                row.push(<Cell \n                            isLit={this.state.board[y][x]} \n                            key={coord}\n                            flipCellsAroundMe={() => this.flipCellsAround(coord)}/>);\n            }\n        tblBoard.push(<tr key={y}>{row}</tr>);\n        }\n        return (\n            <div>\n                <h1 className=\"Board-title\">\n                    <span className=\"neon-orange\">Lights_</span><span className=\"neon-blue\">out</span>\n                </h1>\n                <table className=\"Board\">\n                    <tbody>\n                        {tblBoard}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default Board;","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit http://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}